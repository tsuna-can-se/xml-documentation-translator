# cspell:ignore danielpalme, dorny, NOLOGO, OPTOUT, reporttypes, targetdir

name: ビルドと単体テスト

on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  ci:
    name: ビルドと単体テスト
  
    permissions:
      contents: read

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        framework-version: [net472, net8.0, net9.0]
        exclude:
          - os: ubuntu-latest
            framework-version: net472
        include:
          - framework-version: net8.0
          - framework-version: net9.0

    runs-on: ${{ matrix.os }}
   
    env:
      BUILD_CONFIGURATION: Debug
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
  
    steps:
      - name: ブランチのチェックアウト
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 1
  
      - name: dotnet SDK のセットアップ
        uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x
          dotnet-quality: 'ga'

      - name: dotnet ツールの復元
        shell: bash
        run: dotnet tool restore

      - name: アプリケーションのビルド
        id: application-build
        shell: bash
        continue-on-error: true
        run: |
          echo '## Build Result :gear:' >> $GITHUB_STEP_SUMMARY
          dotnet build --nologo --configuration ${{ env.BUILD_CONFIGURATION }} --verbosity minimal > build-result.txt
          echo ':heavy_check_mark: アプリケーションのビルドに成功しました。' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
  
      - name: ビルド失敗時の結果表示
        shell: bash
        if: ${{ steps.application-build.outcome == 'failure' }}
        run: |
          echo ':x: アプリケーションのビルドに失敗しました。  ' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build-result.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1
  
      - name: 単体テストの実行
        id: run-unit-test
        shell: bash
        continue-on-error: true
        run: |
          echo '## Test Result :memo:' >> $GITHUB_STEP_SUMMARY
          dotnet test --no-build --nologo --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} --framework ${{ matrix.framework-version }} -- --coverage --coverage-output-format cobertura --coverage-output coverage.cobertura.xml --report-xunit-trx --report-xunit-trx-filename ${{ matrix.os }}-${{ matrix.framework-version }}.trx

      - id: create-test-result-report
        name: テスト結果ページの作成
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2
        with:
          name: 'Test results ${{ matrix.framework-version }} on ${{ matrix.os }}'
          path: '**/TestResults/${{ matrix.os }}-${{ matrix.framework-version }}.trx'
          path-replace-backslashes: 'true'
          reporter: 'dotnet-trx'
          only-summary: 'false'
          use-actions-summary: 'true'
          badge-title: 'tests'
          list-suites: 'failed'
          list-tests: 'failed'
          max-annotations: '10'
          fail-on-error: 'false'
          fail-on-empty: 'true'

      - id: create-coverage-report
        name: コードカバレッジレポートの解析
        uses: danielpalme/ReportGenerator-GitHub-Action@5c07e4a90846ee6fd52c211620156d4679b03fcb # 5
        with:
          reports: '**/TestResults/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'MarkdownSummaryGithub'
    
      - name: コードカバレッジの結果表示
        shell: bash
        run: |
          echo '## Coverage :triangular_ruler:' >> $GITHUB_STEP_SUMMARY
          sed -i s/'# Summary'/'Coverage report of ${{ matrix.framework-version }} on ${{ matrix.os }}.'/g CoverageReport/SummaryGithub.md
          sed -i -e '/^#/d' CoverageReport/SummaryGithub.md
          cat CoverageReport/SummaryGithub.md >> $GITHUB_STEP_SUMMARY
    
      - name: テスト結果のアップロード
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: unit-test-results-${{ matrix.os }}-${{ matrix.framework-version }}
          path: tests/**/TestResults/
          retention-days: 1

      - name: 単体テスト結果の確認
        if: ${{ steps.create-test-result-report.outputs.conclusion == 'failure' }}
        run: exit 1
